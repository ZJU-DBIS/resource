（1）https://github.com/CMU-Quake/cvm-tools/tree/master/etree 现有代码

（2）In-core algorithm: 将内存内容checkpointing写到disk文件系统上, 当然也可以写到NVM的文件系统。

checkpointing写到磁盘的是snapshot, 表示mesh, 如一个立方体，具体为多个点的坐标和相关属性，不代表数的结构。

（3）Out-of-core algorithm: Etree代码，将节点写到一个数据库管理系统中，可以供分析，查询，可视化，更新等等。一致性问题交给数据中事务之类东西来处理。

学生的master代码基于Etree code，但是此外添加了很多example, test部分等等。

（4）pm algorithm: 如果把NVM的全部屏蔽掉，就是in-core算法，另外要补充checkpointing的部分。

新的想法：



（1）如何在DRAM+NVM上建立混合的数据结构。

AI，DNN一般用很多数组表示，这个数组如何表示。 数组的访问是否具有时空局部性。训练阶段和推理阶段可能不同。 前者参数和网络拓扑要改变，后者只是值的改变。 后者时间一般比较短。

(2)如何克服NVM的consistency问题。用什么方式？

Journaling, COW, log, log-free等方式，尽量巧妙一点。 

（2）是不是有大量写操作。如果是的话，如何用一些新的办法适应NVM的写特征，寿命。

比如，降低精度，近似计算，压缩，去重这种已经用的很多了。想新的办法，类似Level Hashing.
